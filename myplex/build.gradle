apply plugin: 'android'

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile project(':google-play-services_lib')
    compile project(':mixpanel-android-latest:src:main')
}

android {
    compileSdkVersion 14
    buildToolsVersion "19.0.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res {
                srcDirs = ['res']
				//exclude 'res/values/config.xml'  
            }
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
	
	 signingConfigs {
       myplex{       	  
           storeFile file("$System.env.BUILD_KEYSTORE_PATH")
           storePassword "$System.env.BUILD_KEYSTORE_PASS"
           keyAlias "$System.env.BUILD_KEY_ALIAS"
           keyPassword "$System.env.BUILD_KEY_PASS"
       }
    }	

	productFlavors {
        production {
            println "build : myplex_production"
			println " build : delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplex"
            signingConfig signingConfigs.myplex
        }
        beta {		
            println "build : myplex_beta"
			println "build :delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplexbeta"
            signingConfig signingConfigs.myplex
        }
        demo {		
            println "build : myplex_demo"
			println "build :delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplexdemo"
            signingConfig signingConfigs.myplex
        }
        
        vivadev {		
            println "build : viva-dev"
			println "build :delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplex.riodev"
            signingConfig signingConfigs.myplex
        } 
        
         vivabeta {		
            println "build : viva-beta"
			println "build :delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplex.riobeta"
            signingConfig signingConfigs.myplex
        } 
        
         vivaproduction {		
            println "build : viva-production"
			println "build :delete file : ${buildDir}/../res/values/config.xml"
			delete '${buildDir}/../res/values/config.xml'
			delete '${buildDir}/../res/values/theme.xml'
            packageName "com.apalya.myplex.rio"
            signingConfig signingConfigs.myplex
        }        
    }
	
	sourceSets.production {
        res.srcDirs = ['res', 'res-production']
    }
	
	sourceSets.beta {
        res.srcDirs = ['res', 'res-beta']
    }
    
    sourceSets.demo {
        res.srcDirs = ['res', 'res-demo']
    }
    
    sourceSets.vivadev {
        res.srcDirs = ['res', 'res-viva-dev']
    }
    
    sourceSets.vivabeta {
        res.srcDirs = ['res', 'res-viva-beta']
    }
    
    sourceSets.vivaproduction {
        res.srcDirs = ['res', 'res-viva-production']
    }
	
	buildTypes {

        release {
            runProguard true
            proguardFile file("proguard-android-optimize.txt")
        }
    }

	android.applicationVariants.all{ variant ->


        variant.processManifest.doLast{

            def variantNameStr = variant.name;
            println "applicationVariants variant name ${variantNameStr}"

            def str_c2dm;

            if(variantNameStr.contains("Vivadev")){
                str_c2dm="com.apalya.myplex.riodev.permission.C2D_MESSAGE";
                println "applicationVariants build c2dm vivadev";
            }else if (variantNameStr.contains("Beta")){
                str_c2dm="com.apalya.myplexbeta.permission.C2D_MESSAGE";
                println "applicationVariants build c2dm myplex beta";
            }else {
            	println "applicationVariants no changes required";
                return ;
            }
            
            copy{
                println "applicationVariants Copy started";
                from("${buildDir}/manifests/${variant.dirName}") {
                    include "AndroidManifest.xml"
                }
                into("${buildDir}/manifests/${variant.dirName}/modified")

               
                filter{
                    String line -> line.replaceAll("com.apalya.myplex.permission.C2D_MESSAGE","${str_c2dm}")
                }
               
            }

            copy {
                from("${buildDir}/manifests/${variant.dirName}/modified") {
                    include "AndroidManifest.xml"
                }
                into("${buildDir}/manifests/${variant.dirName}")
            }
        }
   }
	
	
}
